num.injured <- summarise(shooting.2016, sum = sum(injured))
# which city was most affected in terms of number of shootings happened
most.affect.city <- shooting.2016 %>% group_by(city) %>% summarise(n = n()) %>%
filter(n == max(n)) %>% select(city) %>%  as.data.frame()
# number of cities that shootings happened at leaste twice in 2016
twice.cities <- shooting.2016 %>% group_by(city) %>% summarise(n= n()) %>% filter(n >= 2) %>% nrow()
```
### Summary Information
According to a report about shootings in 2016, there were `r num.shootings` shootings happened in U.S. Due to these shootings, `r num.killed` people were killed and `r num.injured` people were injured. The city that was most affected in terms of number of shootings happened was `r most.affect.city`. Additionally, there were `r twice.cities` cities that had at leaste two shootings in 2016.
### Summary Table
```{r, kable, echo=FALSE, message=FALSE, warning=FALSE, results = 'asis'}
#  create an aggregate table about state-level observations
state.shootings <- shooting.2016 %>% group_by(state) %>% summarise(shootings = n(), killed = sum(killed), injured = sum(injured)) %>% arrange(-shootings) %>% head(5)
kable(head(state.shootings))
```
This summary table provies aggregate data about shootings in state-level for the top five states in terms of the number of shootings. The table is in descending order by number of shootings in each stae. Accoring to this table, although Florida did not have as many shootings as the top three states, the number of people killed was actually much higher than other states. This insight may imply that there were serveral shootings in Floria involved heavy loss.
### Analysis of an incident
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# select the incident that cause most people die
selected.incident <- shooting.2016 %>% filter(killed == max(killed))
# retrieve related information about the incident
incident.date <- selected.incident$date
incident.city <- selected.incident$city
incident.state <- selected.incident$state
incident.killed <- selected.incident$killed
incident.injured <- selected.incident$injured
incident.lat <- selected.incident$lat
incident.lng <- selected.incident$lng
```
The incident I chose happened in `r incident.city`,`r incident.state`, on `r incident.date`. The shooting killed `r incident.killed` people and injured `r incident.injured` people. The precise latitude and longitude of the incident are `r incident.lat`, `r incident.lng`. The shooter, [Omar Mateen](https://en.wikipedia.org/wiki/Omar_Mateen), caused the deadiest shooting in United States history and was killed in a shootout with the local police. This shooting was an act of violence against LGBTQ people.
### An Interactive Map
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Assign the scope of the map, color of contienent and state border.
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray90"),
subunitcolor = toRGB("black"),
countrycolor = toRGB("white")
)
# Create a bubble map of shootings. Manipuate size based on injured people, color based on killed people.
# Display date, location and numbers when hover over each point.
map <- plot_geo(shooting.2016, locationmode = 'USA-states') %>%
add_markers(
x = ~lng, y = ~lat, size = ~injured, color = ~killed, hoverinfo = "text",
text = ~paste(city, ",", state, "<br />", date, "<br />", killed, 'killed', ',', injured, 'injured')
) %>%
layout(title = '2016 U.S shooting map', geo = g)
```
`r  map`
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# order date and number of people killed by months
shooting.2016$month <- gsub("([A-Za-z]+).*", "\\1", shooting.2016$date)
shooting.month <- shooting.2016 %>% group_by(month) %>% mutate(shootings = n(), killed = sum(killed)) %>% subset(!duplicated(month)) %>% select(month, shootings, killed)
#
#shooting.month$month <- factor(shooting.data$month, levels = shooting.month[["month"]])
#data$month <- factor(data$month, levels = data[["month"]])
#shooting.month$month <- sort(shooting.month$month)
shooting.month$month <- factor(shooting.month$month, levels = shooting.month[["month"]])
```
View(shooting.month)
shooting.month$month <- factor(shooting.month$month, levels = shooting.month[["-month"]])
View(shooting.month)
shooting.month$month <- factor(shooting.month$month, levels = -shooting.month[["month"]])
View(shooting.month)
shooting.month$month <- factor(shooting.month$month,levels= month.name)
shooting.month$month <- factor(shooting.month$month,levels= month.name)
shooting.month = shooting.month[order(shooting.month$month,decreasing=FALSE),]
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
---
title: "Shooting Report"
output: html_document
---
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# load library and retieve csv file
library(dplyr)
library(knitr)
library(plotly)
shooting.2016 <- read.csv('data/shootings-2016.csv', stringsAsFactors = FALSE)
# the number of shootings in 2016
num.shootings <- nrow(shooting.2016)
# the number of lives were lost due to shooting in 2016
num.killed <- summarise(shooting.2016, sum = sum(killed))
# the number of people were injured
num.injured <- summarise(shooting.2016, sum = sum(injured))
# which city was most affected in terms of number of shootings happened
most.affect.city <- shooting.2016 %>% group_by(city) %>% summarise(n = n()) %>%
filter(n == max(n)) %>% select(city) %>%  as.data.frame()
# number of cities that shootings happened at leaste twice in 2016
twice.cities <- shooting.2016 %>% group_by(city) %>% summarise(n= n()) %>% filter(n >= 2) %>% nrow()
```
### Summary Information
According to a report about shootings in 2016, there were `r num.shootings` shootings happened in U.S. Due to these shootings, `r num.killed` people were killed and `r num.injured` people were injured. The city that was most affected in terms of number of shootings happened was `r most.affect.city`. Additionally, there were `r twice.cities` cities that had at leaste two shootings in 2016.
### Summary Table
```{r, kable, echo=FALSE, message=FALSE, warning=FALSE, results = 'asis'}
#  create an aggregate table about state-level observations
state.shootings <- shooting.2016 %>% group_by(state) %>% summarise(shootings = n(), killed = sum(killed), injured = sum(injured)) %>% arrange(-shootings) %>% head(5)
kable(head(state.shootings))
```
This summary table provies aggregate data about shootings in state-level for the top five states in terms of the number of shootings. The table is in descending order by number of shootings in each stae. Accoring to this table, although Florida did not have as many shootings as the top three states, the number of people killed was actually much higher than other states. This insight may imply that there were serveral shootings in Floria involved heavy loss.
### Analysis of an incident
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# select the incident that cause most people die
selected.incident <- shooting.2016 %>% filter(killed == max(killed))
# retrieve related information about the incident
incident.date <- selected.incident$date
incident.city <- selected.incident$city
incident.state <- selected.incident$state
incident.killed <- selected.incident$killed
incident.injured <- selected.incident$injured
incident.lat <- selected.incident$lat
incident.lng <- selected.incident$lng
```
The incident I chose happened in `r incident.city`,`r incident.state`, on `r incident.date`. The shooting killed `r incident.killed` people and injured `r incident.injured` people. The precise latitude and longitude of the incident are `r incident.lat`, `r incident.lng`. The shooter, [Omar Mateen](https://en.wikipedia.org/wiki/Omar_Mateen), caused the deadiest shooting in United States history and was killed in a shootout with the local police. This shooting was an act of violence against LGBTQ people.
### An Interactive Map
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Assign the scope of the map, color of contienent and state border.
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray90"),
subunitcolor = toRGB("black"),
countrycolor = toRGB("white")
)
# Create a bubble map of shootings. Manipuate size based on injured people, color based on killed people.
# Display date, location and numbers when hover over each point.
map <- plot_geo(shooting.2016, locationmode = 'USA-states') %>%
add_markers(
x = ~lng, y = ~lat, size = ~injured, color = ~killed, hoverinfo = "text",
text = ~paste(city, ",", state, "<br />", date, "<br />", killed, 'killed', ',', injured, 'injured')
) %>%
layout(title = '2016 U.S shooting map', geo = g)
```
`r  map`
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# order date and number of people killed by months
shooting.2016$month <- gsub("([A-Za-z]+).*", "\\1", shooting.2016$date)
shooting.month <- shooting.2016 %>% group_by(month) %>% mutate(killed = sum(killed), injured = sum(injured)) %>%  subset(!duplicated(month)) %>% select(month, killed, injured)
# sort the data frame by months' name in chronological order
shooting.month$month <- factor(shooting.month$month,levels= month.name)
shooting.month = shooting.month[order(shooting.month$month,decreasing=FALSE),]
#
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
```
`r chart`
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
shooting.month = shooting.month[order(shooting.month$month,decreasing=FALSE),]
shooting.month$month <- factor(shooting.month$month,levels= month.name)
# From: http://shiny.rstudio.com/articles/basics.html
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
info$student.num <- nrow(dataset)
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / coding.num, 0), '%')
}
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / coding.num, 0), '%')
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / coding.num, 0), '%')
}
?pdflatex
??pdflatex
library(pdflatex)
install.packages(pdflatex)
install.packages("shiny")
setwd('~/Documents/info-201/m14-shiny/exercise-3/')
library(shiny)
> runExample("01_hello")
library(shiny)
runExample('01_hello')
shiny::runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/m18-shiny/exercise-5')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
shiny::runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
setwd("~/Desktop/info-201-final")
setwd("~/Desktop/info-201-final")
library(knitr)
knitr::include_graphics("path/to/image.png")
knitr::include_graphics("./pics/alissa.jpg")
install.packages('pandoc')
kable(knitr::include_graphics("./pics/alissa.jpg"), 'ee')
knitr::include_graphics("./pics/alissa.jpg")
setwd("~/Desktop/info-201-final")
install.packages("wrapfig")
setwd("~/Desktop/info-201-final/pics")
setwd("~/Desktop/info-201-final/pics")

# retrieve related information about the incident
incident.date <- selected.incident$date
incident.city <- selected.incident$city
incident.state <- selected.incident$state
incident.killed <- selected.incident$killed
incident.injured <- selected.incident$injured
incident.lat <- selected.incident$lat
incident.lng <- selected.incident$lng
```
The incident I chose happened in `r incident.city`,`r incident.state`, on `r incident.date`. The shooting killed `r incident.killed` people and injured `r incident.injured` people. The precise latitude and longitude of the incident are `r incident.lat`, `r incident.lng`. The shooter, [Omar Mateen](https://en.wikipedia.org/wiki/Omar_Mateen), caused the deadiest shooting in United States history and was killed in a shootout with the local police. This shooting was an act of violence against LGBTQ people.
### An Interactive Map
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Assign the scope of the map, color of contienent and state border.
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray90"),
subunitcolor = toRGB("black"),
countrycolor = toRGB("white")
)
# Create a bubble map of shootings. Manipuate size based on injured people, color based on killed people.
# Display date, location and numbers when hover over each point.
map <- plot_geo(shooting.2016, locationmode = 'USA-states') %>%
add_markers(
x = ~lng, y = ~lat, size = ~injured, color = ~killed, hoverinfo = "text",
text = ~paste(city, ",", state, "<br />", date, "<br />", killed, 'killed', ',', injured, 'injured')
) %>%
layout(title = '2016 U.S shooting map', geo = g)
```
`r  map`
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# order date and number of people killed by months
shooting.2016$month <- gsub("([A-Za-z]+).*", "\\1", shooting.2016$date)
shooting.month <- shooting.2016 %>% group_by(month) %>% mutate(killed = sum(killed), injured = sum(injured)) %>%  subset(!duplicated(month)) %>% select(month, killed, injured)
# sort the data frame by months' name in chronological order
shooting.month$month <- factor(shooting.month$month,levels= month.name)
shooting.month = shooting.month[order(shooting.month$month,decreasing=FALSE),]
#
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
```
`r chart`
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
chart <- plot_ly(shooting.month, x = ~month, y = ~killed, name = 'killed people', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4)) %>%
add_trace(y = ~injured, name = 'injured people',line = list(color = 'rgb(22, 96, 167)', width = 4)) %>%
layout(title = "U.S Shooting Casualties in 2016",
xaxis = list(title = "Months"),
yaxis = list (title = "Number of People"))
shooting.month = shooting.month[order(shooting.month$month,decreasing=FALSE),]
shooting.month$month <- factor(shooting.month$month,levels= month.name)
# From: http://shiny.rstudio.com/articles/basics.html
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
info$student.num <- nrow(dataset)
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / info$student.num, 0), '%')
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / coding.num, 0), '%')
}
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / coding.num, 0), '%')
}
#write a function that takes in a dataset as a parameter, and returns a list of information about it.
library(dplyr)
GetInfo <- function(dataset) {
info <- list()
# number of students in the course
info$student.num <- nrow(dataset)
# percentage of different operation system students using
num.mac <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Mac') %>% nrow()
info$mac.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.win <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Windows') %>% nrow()
info$win.percent <- paste0(round(100 * num.mac / info$student.num, 0), "%")
num.linux <- dataset %>% filter(What.operating.system.do.you.typically.use. == 'Linux') %>% nrow()
info$linux.percent <- paste0(round(100 * num.linux / info$student.num, 0), "%")
# percentage of students that are Seahawk fans or not
num.fans <- dataset %>% filter(Are.you.a.Seahawks.fan. == 'Yes') %>% nrow()
info$seahawk.fans <- paste0(round(100 * num.fans / info$student.num, 0), "%")
# students' class distribution
info$freshman.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Freshman') %>% nrow())
/ info$student.num, 0), "%")
info$sophomore.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Sophomore') %>% nrow())
/ info$student.num, 0), "%")
info$junior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Junior') %>% nrow())
/ info$student.num, 0), "%")
info$senior.percent <- paste0(round(100 * (filter(dataset, What.is.your.current.class.standing. == 'Senior') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people borned in Wasington state
info$born.wa <- paste0(round(100 * (filter(dataset, Were.you.born.in.Washington.state. == 'Yes') %>% nrow())
/ info$student.num, 0), "%")
# the percentage of people who have coding experience but never using command line or using git for version control before
coding.num <- dataset %>% filter(How.would.you.describe.your.coding.programming.experience. != 'Never written code')
no.command.version <- filter(dataset, Using.git.for.version.control == 'Never used it', Using.the.command.line...terminal == 'Never used it')
%>% nrow()
info$no.version.command.percent <- paste0(round(100 * no.command.version / coding.num, 0), '%')
}
?pdflatex
??pdflatex
library(pdflatex)
install.packages(pdflatex)
install.packages("shiny")
setwd('~/Documents/info-201/m14-shiny/exercise-3/')
library(shiny)
> runExample("01_hello")
library(shiny)
runExample('01_hello')
shiny::runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/m18-shiny/exercise-5')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
shiny::runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
runApp('Desktop/info201/a8-building-apps-albertli354')
new <- final.df %>% select(Zip)
library(dplyr)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
library(zipcode)
library(dplyr)
setwd("~/Desktop/info-201-final")
library(zipcode)
library(dplyr)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
new <- final.df %>% select(Zip)
View(new)
final.df <- final.df %>% select(Zip) %>% substr(5)
final.df <- final.df %>% select(Zip) %>% substr(1,4)
View(final.df)
test <- final.df %>% select(Zip) %>% substr(1,4)
test <- final.df %>% select(Zip) %>% substr(1,4)
test <- final.df %>% select(Zip)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
test <- final.df %>% select(Zip)
View(test
View(test)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
test <- final.df %>% select(Zip)
View(test)
test <- final.df %>% select(Zip) %>% as.numeric()
test <- final.df %>% select(Zip) %>% as.numeric()
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
test <- final.df %>% select(Zip) %>% as.numeric()
test <- final.df %>% select(Zip) %>% substr(1, 5)
View(test)
test <- final.df %>% select(Zip) %>% lapply(substr(1, 5))
test <- final.df %>% select(Zip) %>% lapply(FUN = substr(1, 5))
test <- final.df %>% select(Zip) %>% lapply(FUN = substr(1, 5))
test <- final.df %>% mutate(zip = as.numeric(Zip))
View(test)
test <- final.df %>% mutate(zip = as.numeric(Zip)) %>% substr(1,4)
View(test)
test <- final.df %>% mutate(zip = as.numeric(Zip)) %>% select(Zip)
View(test)
test <- lapply(test, substr(1, 5))
test <- lapply(test, substr(1, 5, stop = TRUE))
test <- lapply(test, substr(1, 5, stop = FALSE))
test <- final.df %>% select(Zip)
test <- lapply(test, substr(1, 5, stop = FALSE))
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
test <- final.df %>% select(Zip)
test <- lapply(test, substr(1, 5, stop = FALSE))
View(test)
is.vector(test)
is.data.frame(test)
test <- mutate(ZIP = substr(Zip, 1, 5))
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
test <- final.df %>% select(Zip)
test <- mutate(ZIP = substr(Zip, 1, 5))
test <- final.df %>% select(Zip)
test <- mutate(ZIP = substr(Zip, 1, 5))
test <- mutate(test, ZIP = substr(Zip, 1, 5))
test <- final.df %>% select(Zip)
test <- mutate(test, ZIP = substr(Zip, 1, 5))
mutate(Names = substr(Names, 1, 5))
final.df$Zip <- substr(final.df$Zip, 1, 5)
View(final.df)
data("zipcode")
official.zip <- data("zipcode")
View(official.zip)
official.zip <- data(zipcode)
View(official.zip)
library(zipcode)
library(dplyr)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
final.df$Zip <- substr(final.df$Zip, 1, 5)
official.zip <- data(zipcode)
View(zipcode)
official.zip <- zipcode
View(official.zip)
colnames(zipcode$zip) <- "Zip"
colnames(zipcode$zip) <- "Zip"
inner_join(final.df, zipcode)
inner_join(final.df, zipcode, by = zip)
inner_join(final.df, zipcode, by = Zip)
names(final.df)[names(final.df) == 'Zip'] <- 'zip'
View(final.df)
full_join(final.df, zipcode, by = 'zip')
View(final.df)
final.df <- full_join(final.df, zipcode, by = 'zip')
View(final.df)
write.csv(final.df, './data/final.data.csv', row.names = FALSE)
library(zipcode)
library(dplyr)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
final.df$Zip <- substr(final.df$Zip, 1, 5)
final.df <- full_join(final.df, zipcode, by)
names(final.df)[names(final.df) == 'Zip'] <- 'zip'
final.df <- full_join(final.df, zipcode, by = 'zip')
write.csv(final.df, './data/final.data.csv', row.names = FALSE)
final.df <- full_join(final.df, zipcode, by)
library(zipcode)
library(dplyr)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
final.df$Zip <- substr(final.df$Zip, 1, 5)
final.df <- full_join(final.df, zipcode, by)
names(final.df)[names(final.df) == 'Zip'] <- 'zip'
final.df <- full_join(final.df, zipcode, by = 'zip')
write.csv(final.df, './data/final.data.csv', row.names = FALSE)
library(zipcode)
library(dplyr)
final.df <- read.csv("./data/Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
final.df$Zip <- substr(final.df$Zip, 1, 5)
final.df <- full_join(final.df, zipcode, by)
names(final.df)[names(final.df) == 'Zip'] <- 'zip'
final.df <- full_join(final.df, zipcode, by = 'zip')
View(final.df)
x <- read.csv("Total.sexual.assaults.05.15.csv", row.names = TRUE)
setwd("C:/Users/Althea/Desktop/info201/info-201-final/data")
x <- read.csv("Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
View(x)
View(x)
x <- read.csv("Total.sexual.assaults.05.15.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Althea/Desktop/info201/info-201-final/data")
View(x)
write.csv(new2, "Updated.total.05.15.csv", row.names = FALSE)
write.csv(x, "Updated.total.05.15.csv", row.names = FALSE)
